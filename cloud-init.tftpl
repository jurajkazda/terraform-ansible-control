#cloud-config

package_update: false
package_upgrade: false

runcmd:
  - |
    CLOUD_INIT_LOG_FILE="/home/opc/cloud-init.log"
    PYTHON_VERSIONS="python3.12 python3.11 python3.10 python3.9"
    SELECTED_PYTHON=""

    rm -f $CLOUD_INIT_LOG_FILE

    for version in $PYTHON_VERSIONS; do
      if dnf list available | grep -q "^${version}\."; then
        SELECTED_PYTHON=$version
        echo "Found available Python version: $SELECTED_PYTHON" | tee -a $CLOUD_INIT_LOG_FILE
        break
      fi
    done

    # If no specific version found, try to find any python3.x version
    if [ -z "$SELECTED_PYTHON" ]; then
      echo "No preferred versions found, searching for any Python 3.x version..." | tee -a $CLOUD_INIT_LOG_FILE
      SELECTED_PYTHON=$(dnf list available | grep -E '^python3\.[0-9]+\.' | sort -V | tail -1 | awk '{print $1}' | cut -d'.' -f1-2)

      if [ -n "$SELECTED_PYTHON" ]; then
        echo "Found alternative Python version: $SELECTED_PYTHON" | tee -a $CLOUD_INIT_LOG_FILE
      else
        echo "ERROR: No Python 3.x versions found in repositories!" | tee -a $CLOUD_INIT_LOG_FILE
        dnf list available | grep -E '^python3'
        exit 1
      fi
    fi

    echo "Installing Python version: $SELECTED_PYTHON" | tee -a $CLOUD_INIT_LOG_FILE
    dnf install -y ${SELECTED_PYTHON} ${SELECTED_PYTHON}-pip ${SELECTED_PYTHON}-devel

    # Get the installed Python version for reporting
    INSTALLED_VERSION=$(${SELECTED_PYTHON} --version)
    echo "Successfully installed Python version: $INSTALLED_VERSION" | tee -a $CLOUD_INIT_LOG_FILE

    # Ensure pip is up to date
    ${SELECTED_PYTHON} -m pip install --upgrade pip

    # Install Ansible
    ${SELECTED_PYTHON} -m pip install ansible

    # Create convenient aliases for opc user and root
    echo "alias python='${SELECTED_PYTHON}'" >> /home/opc/.bashrc
    echo "alias python3='${SELECTED_PYTHON}'" >> /home/opc/.bashrc
    echo "alias pip='${SELECTED_PYTHON} -m pip'" >> /home/opc/.bashrc
    echo "alias python='${SELECTED_PYTHON}'" >> /root/.bashrc
    echo "alias python3='${SELECTED_PYTHON}'" >> /root/.bashrc
    echo "alias pip='${SELECTED_PYTHON} -m pip'" >> /root/.bashrc
    chown opc:opc /home/opc/.bashrc

    echo "Cloud-init Python setup completed successfully!" | tee -a $CLOUD_INIT_LOG_FILE

    # Install Git
    echo "Installing Git..." | tee -a $CLOUD_INIT_LOG_FILE
    dnf install -y git
    echo "Cloud-init Git setup completed successfully!" | tee -a $CLOUD_INIT_LOG_FILE

    # Install Terraform in specific version (latest with open license)
    echo "Installing Terraform..." | tee -a $CLOUD_INIT_LOG_FILE
    wget https://releases.hashicorp.com/terraform/1.5.7/terraform_1.5.7_linux_amd64.zip
    echo "Terraform 1.5.7 downloaded successfully!" | tee -a $CLOUD_INIT_LOG_FILE
    unzip terraform_1.5.7_linux_amd64.zip
    echo "Terraform package unzipped successfully!" | tee -a $CLOUD_INIT_LOG_FILE
    mv terraform /usr/local/bin
    echo "Terraform binary moved successfully!" | tee -a $CLOUD_INIT_LOG_FILE
    rm terraform_1.5.7_linux_amd64.zip
    echo "Terraform installation file(s) cleaned up successfully!" | tee -a $CLOUD_INIT_LOG_FILE

    # Install OCI CLI
    echo "Installing OCI CLI..." | tee -a $CLOUD_INIT_LOG_FILE
    ${SELECTED_PYTHON} -m pip install oci-cli --user
    echo "Cloud-init OCI CLI setup completed successfully!" | tee -a $CLOUD_INIT_LOG_FILE

    # Installing latest GitHub CLI
    echo "Installing GitHub CLI..." | tee -a $CLOUD_INIT_LOG_FILE
    GH_LATEST=$(curl -s https://api.github.com/repos/cli/cli/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
    echo "Latest GitHub CLI version: ${GH_LATEST}..." | tee -a $CLOUD_INIT_LOG_FILE
    wget https://github.com/cli/cli/releases/download/${GH_LATEST}/gh_${GH_LATEST#v}_linux_amd64.rpm
    echo "GitHub CLI downloaded successfully..." | tee -a $CLOUD_INIT_LOG_FILE
    dnf -y install ./gh_${GH_LATEST#v}_linux_amd64.rpm
    echo "GitHub CLI setup completed successfully..."

    # Install and configure nginx
    echo "Installing nginx web server..." | tee -a $CLOUD_INIT_LOG_FILE
    dnf install -y nginx

    # Create directories for SSL certificates
    mkdir -p /etc/nginx/ssl

    # Generate self-signed SSL certificate
    echo "Generating self-signed SSL certificate..." | tee -a $CLOUD_INIT_LOG_FILE
    openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
      -keyout /etc/nginx/ssl/nginx.key -out /etc/nginx/ssl/nginx.crt \
      -subj "/C=US/ST=State/L=City/O=Organization/CN=example.com"

    # Configure nginx for HTTP and HTTPS
    echo "Configuring nginx for HTTP and HTTPS..." | tee -a $CLOUD_INIT_LOG_FILE
    cat > /etc/nginx/conf.d/default.conf << 'EOF'
server {
    listen 80;
    listen [::]:80;
    server_name _;

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }
}

server {
    listen 443 ssl;
    listen [::]:443 ssl;
    server_name _;

    ssl_certificate /etc/nginx/ssl/nginx.crt;
    ssl_certificate_key /etc/nginx/ssl/nginx.key;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers "EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH";

    location / {
        root   /usr/share/nginx/html;
        index  index.html index.htm;
    }
}
EOF

    # Create a custom index page
    echo "Creating custom index page..." | tee -a $CLOUD_INIT_LOG_FILE
    cat > /usr/share/nginx/html/index.html << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <title>Welcome to Nginx</title>
    <style>
        body {
            width: 35em;
            margin: 0 auto;
            font-family: Tahoma, Verdana, Arial, sans-serif;
        }
    </style>
</head>
<body>
    <h1>Welcome to Nginx!</h1>
    <p>If you see this page, the nginx web server is successfully installed and
    working. Further configuration is required.</p>

    <p>This server is configured for both HTTP and HTTPS.</p>
</body>
</html>
EOF

    # Start and enable nginx
    echo "Starting and enabling nginx service..." | tee -a $CLOUD_INIT_LOG_FILE
    systemctl start nginx
    systemctl enable nginx

    # Open firewall ports for HTTP and HTTPS
    echo "Opening firewall ports for HTTP and HTTPS..." | tee -a $CLOUD_INIT_LOG_FILE
    firewall-cmd --permanent --add-service=http
    firewall-cmd --permanent --add-service=https
    firewall-cmd --reload

    echo "Nginx installation and configuration completed successfully!" | tee -a $CLOUD_INIT_LOG_FILE

final_message: "Cloud-init completed. Latest available Python and Ansible installed from Oracle Linux repositories. Nginx installed and configured for HTTP and HTTPS."
